{"ast":null,"code":"var _jsxFileName = \"D:\\\\woooork\\\\required5projects\\\\Meme Generator app\\\\src\\\\components\\\\Main.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Main() {\n  _s();\n  const [meme, setMeme] = useState({\n    topText: \"One does not simply\",\n    bottomText: \"Walk into Mordor\",\n    imageUrl: \"http://i.imgflip.com/1bij.jpg\"\n  });\n  const [allMemes, setAllMemes] = useState([]);\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(res => res.json()).then(data => setAllMemes(data.data.memes));\n  }, []);\n\n  /**\r\n   * Challenge: Get a random image from the array of\r\n   * allMemes when the user clicks the button. Once\r\n   * you've gotten a random image from the array, make\r\n   * sure to write the code that will display that\r\n   * random meme image to the page.\r\n   */\n\n  function handleChange(event) {\n    const {\n      value,\n      name\n    } = event.currentTarget;\n    setMeme(prevMeme => ({\n      ...prevMeme,\n      [name]: value\n    }));\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Top Text\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"One does not simply\",\n          name: \"topText\",\n          onChange: handleChange,\n          value: meme.topText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Bottom Text\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Walk into Mordor\",\n          name: \"bottomText\",\n          onChange: handleChange,\n          value: meme.bottomText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Get a new meme image \\uD83D\\uDDBC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: meme.imageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"top\",\n        children: meme.topText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bottom\",\n        children: meme.bottomText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n_s(Main, \"RHyQUze4nZ0ClEqMe1rIu1YYCLM=\");\n_c = Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Main","_s","meme","setMeme","topText","bottomText","imageUrl","allMemes","setAllMemes","fetch","then","res","json","data","memes","handleChange","event","value","name","currentTarget","prevMeme","children","className","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","src","_c","$RefreshReg$"],"sources":["D:/woooork/required5projects/Meme Generator app/src/components/Main.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\"\r\n\r\nexport default function Main() {\r\n    const [meme, setMeme] = useState({\r\n        topText: \"One does not simply\",\r\n        bottomText: \"Walk into Mordor\",\r\n        imageUrl: \"http://i.imgflip.com/1bij.jpg\"\r\n    })\r\n    const [allMemes, setAllMemes] = useState([])\r\n    \r\n    useEffect(() => {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(res => res.json())\r\n            .then(data => setAllMemes(data.data.memes))\r\n    }, [])\r\n    \r\n    /**\r\n     * Challenge: Get a random image from the array of\r\n     * allMemes when the user clicks the button. Once\r\n     * you've gotten a random image from the array, make\r\n     * sure to write the code that will display that\r\n     * random meme image to the page.\r\n     */\r\n    \r\n    function handleChange(event) {\r\n        const {value, name} = event.currentTarget\r\n        setMeme(prevMeme => ({\r\n            ...prevMeme,\r\n            [name]: value\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <main>\r\n            <div className=\"form\">\r\n                <label>Top Text\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"One does not simply\"\r\n                        name=\"topText\"\r\n                        onChange={handleChange}\r\n                        value={meme.topText}\r\n                    />\r\n                </label>\r\n\r\n                <label>Bottom Text\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Walk into Mordor\"\r\n                        name=\"bottomText\"\r\n                        onChange={handleChange}\r\n                        value={meme.bottomText}\r\n                    />\r\n                </label>\r\n                <button>Get a new meme image ðŸ–¼</button>\r\n            </div>\r\n            <div className=\"meme\">\r\n                <img src={meme.imageUrl} />\r\n                <span className=\"top\">{meme.topText}</span>\r\n                <span className=\"bottom\">{meme.bottomText}</span>\r\n            </div>\r\n        </main>\r\n    )\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}